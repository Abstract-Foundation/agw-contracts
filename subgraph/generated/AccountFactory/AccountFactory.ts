/**
 * Copyright Clave - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 */
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class NewClaveAccount extends ethereum.Event {
  get params(): NewClaveAccount__Params {
    return new NewClaveAccount__Params(this);
  }
}

export class NewClaveAccount__Params {
  _event: NewClaveAccount;

  constructor(event: NewClaveAccount) {
    this._event = event;
  }

  get accountAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class AccountFactory extends ethereum.SmartContract {
  static bind(address: Address): AccountFactory {
    return new AccountFactory("AccountFactory", address);
  }

  VERSION(): string {
    let result = super.call("VERSION", "VERSION():(string)", []);

    return result[0].toString();
  }

  try_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall("VERSION", "VERSION():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  deployAccount(salt: Bytes, initializer: Bytes): Address {
    let result = super.call(
      "deployAccount",
      "deployAccount(bytes32,bytes):(address)",
      [
        ethereum.Value.fromFixedBytes(salt),
        ethereum.Value.fromBytes(initializer),
      ],
    );

    return result[0].toAddress();
  }

  try_deployAccount(
    salt: Bytes,
    initializer: Bytes,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployAccount",
      "deployAccount(bytes32,bytes):(address)",
      [
        ethereum.Value.fromFixedBytes(salt),
        ethereum.Value.fromBytes(initializer),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAddressForSalt(salt: Bytes): Address {
    let result = super.call(
      "getAddressForSalt",
      "getAddressForSalt(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(salt)],
    );

    return result[0].toAddress();
  }

  try_getAddressForSalt(salt: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getAddressForSalt",
      "getAddressForSalt(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(salt)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getImplementation(): Address {
    let result = super.call(
      "getImplementation",
      "getImplementation():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_getImplementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getImplementation",
      "getImplementation():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxyBytecodeHash(): Bytes {
    let result = super.call(
      "proxyBytecodeHash",
      "proxyBytecodeHash():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_proxyBytecodeHash(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxyBytecodeHash",
      "proxyBytecodeHash():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get implementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get registry(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _proxyBytecodeHash(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get deployer(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ChangeDeployerCall extends ethereum.Call {
  get inputs(): ChangeDeployerCall__Inputs {
    return new ChangeDeployerCall__Inputs(this);
  }

  get outputs(): ChangeDeployerCall__Outputs {
    return new ChangeDeployerCall__Outputs(this);
  }
}

export class ChangeDeployerCall__Inputs {
  _call: ChangeDeployerCall;

  constructor(call: ChangeDeployerCall) {
    this._call = call;
  }

  get newDeployer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeDeployerCall__Outputs {
  _call: ChangeDeployerCall;

  constructor(call: ChangeDeployerCall) {
    this._call = call;
  }
}

export class DeployAccountCall extends ethereum.Call {
  get inputs(): DeployAccountCall__Inputs {
    return new DeployAccountCall__Inputs(this);
  }

  get outputs(): DeployAccountCall__Outputs {
    return new DeployAccountCall__Outputs(this);
  }
}

export class DeployAccountCall__Inputs {
  _call: DeployAccountCall;

  constructor(call: DeployAccountCall) {
    this._call = call;
  }

  get salt(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get initializer(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class DeployAccountCall__Outputs {
  _call: DeployAccountCall;

  constructor(call: DeployAccountCall) {
    this._call = call;
  }

  get accountAddress(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
